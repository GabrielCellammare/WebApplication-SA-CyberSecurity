package controller.Servlet.userLogged;

import java.io.IOException;
import java.util.Base64;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import model.Dao.CookieDAO;

public class AuthenticationFilter implements Filter {

    private static final String LOGIN_PAGE = "userNotLoggedLogin.jsp";
    private static final String INDEX_PAGE = "userLoggedIndex.jsp";

    @Override
    public void init(FilterConfig config) throws ServletException {
        // Inizializzazione se necessaria
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;

        // Imposta le intestazioni di cache per impedire il caching delle pagine protette
        httpResponse.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
        httpResponse.setHeader("Pragma", "no-cache");
        httpResponse.setDateHeader("Expires", 0);

        // Recupera la sessione corrente, se esiste
        HttpSession session = httpRequest.getSession(false);
        boolean isLoggedIn = (session != null && session.getAttribute("email") != null);
        
        System.out.println("isLOGGEDIN: " + isLoggedIn);
        System.out.println("Email: " + session.getAttribute("email"));

        if (!isLoggedIn) {
            // Verifica se c'è un cookie "rememberMe"
            Cookie[] cookies = httpRequest.getCookies();
            boolean rememberMeCookieFound = false;

            if (cookies != null) {
                for (Cookie cookie : cookies) {
                    if ("rememberMe".equals(cookie.getName())) {
                        rememberMeCookieFound = true;
                        String token = cookie.getValue();
                        byte[] token_decode = Base64.getDecoder().decode(token);

                        if (CookieDAO.isTokenValidDAO(token_decode)) {
                            // Autenticazione tramite cookie riuscita
                            String email = CookieDAO.getEmailFromTokenDAO(token_decode);
                            session = httpRequest.getSession(true);  // Crea una nuova sessione
                            session.setAttribute("email", email);
                            session.setAttribute("login", true);
                            session.setMaxInactiveInterval(15 * 60);
                            isLoggedIn = true;  // Utente autenticato
                            break;
                        } else {
                            // Token non valido, rimuovi il cookie
                            if (CookieDAO.deleteToken(token_decode)) {
                                Cookie expiredCookie = new Cookie("rememberMe", null);
                                expiredCookie.setMaxAge(0);
                                expiredCookie.setHttpOnly(true);
                                expiredCookie.setSecure(true);
                                httpResponse.addCookie(expiredCookie);
                            }
                            isLoggedIn = false;  // Imposta come non autenticato
                            break;
                        }
                    }
                }
            }

            // Se l'utente non è autenticato e il cookie "rememberMe" non è stato trovato o è invalido
            if (!isLoggedIn) {
                // L'utente non autenticato può accedere alla pagina di login
                chain.doFilter(request, response);
                return;  // Esci dal filtro
            }
        }

        if (isLoggedIn) {
            // Utente autenticato, non dovrebbe vedere la pagina di login
            httpResponse.sendRedirect(INDEX_PAGE);
            return;  // Esci dalla funzione dopo il reindirizzamento
        }

        // Tutte le altre richieste sono permesse
        chain.doFilter(request, response);
    }

    @Override
    public void destroy() {
        // Pulizia se necessaria
    }
}
