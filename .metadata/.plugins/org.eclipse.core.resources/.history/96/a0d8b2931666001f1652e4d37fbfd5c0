package application.util.entity;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;

import application.util.cryptography.Encryption;
import application.util.cryptography.PasswordManager;

public class UserLogged {
	
	private static final int CSRF_TOKEN_LENGTH = 32; // 32 bytes * 8 = 256 bits
    private static final SecureRandom secureRandom = new SecureRandom();
    private byte[] base64EncodedEmail;
    private String timestamp;
    private String csrfToken;
    private String cookieToken;
    
    public UserLogged(byte[] base64EncodedEmail){
    	this.base64EncodedEmail=base64EncodedEmail;
    	LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        this.timestamp = currentDateTime.format(formatter);	
        this.csrfToken=this.generateCsrfToken();
        this.cookieToken=this.generateSecureCookieToken();

    }
    
    private String generateCsrfToken() {
        byte[] tokenBytes = new byte[CSRF_TOKEN_LENGTH];
        secureRandom.nextBytes(tokenBytes);
        byte[] tokenBytesPadding = Encryption.addPadding(tokenBytes);
		byte[] tokenBytesPadding_encrypted=null;
		try{
			tokenBytesPadding_encrypted = Encryption.encrypt(tokenBytesPadding);
			return Base64.getEncoder().encodeToString(tokenBytesPadding_encrypted);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
		
    }
    
    private String generateSecureCookieToken() {
    return Base64.getEncoder().encodeToString(
    			PasswordManager.concatenateAndHash(
    					(this.base64EncodedEmail+this.timestamp.getBytes(java.nio.charset.StandardCharsets.UTF_8))., 
    					(this.csrfToken).getBytes(java.nio.charset.StandardCharsets.UTF_8)));
		
    }

	public byte[] getBase64EncodedEmail() {
		return base64EncodedEmail;
	}

	public String getTimestamp() {
		return timestamp;
	}

	public String getCsrfToken() {
		return csrfToken;
	}

	public String getCookieToken() {
		return cookieToken;
	}

    

     

}
