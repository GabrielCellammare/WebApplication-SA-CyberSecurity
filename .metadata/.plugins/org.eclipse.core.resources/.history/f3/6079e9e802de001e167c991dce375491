package application.util;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.regex.Pattern;

public class PasswordManager {

	final static int saltLength = 16;
	final static char[] specialCharacters = {'!','@','#','$','%','^','&','.','*','(',')','-','_','+','=','<','>','?','.'};

	public static void clearBytes(byte[] password) {
		if (password != null) {

			for (int i = 0; i < password.length; i++) {
				password[i] = 0;
			}
		}
	}
	
	public static byte[] concatenateAndHash(byte[] password, byte[] salt) {
		try {
			// Alloca un nuovo array di byte con dimensioni totali
			byte[] concatenatedData = new byte[password.length + salt.length];

			// Copia i dati dal primo array di byte al nuovo array
			System.arraycopy(password, 0, concatenatedData, 0, password.length);

			// Copia i dati dal secondo array di byte al nuovo array
			System.arraycopy(salt, 0, concatenatedData, password.length, salt.length);

			// Ottieni un'istanza di MessageDigest con l'algoritmo SHA-256
			MessageDigest digest = MessageDigest.getInstance("SHA-256");

			// Calcola l'hash dell'array di byte concatenato
			return digest.digest(concatenatedData);

		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		}
	}

	public static byte[] generateRandomBytes(int saltLenghts) {


		byte[] salt = new byte[saltLength];
		SecureRandom secureRandom = new SecureRandom();
		secureRandom.nextBytes(salt);

		return salt;
	}

	public static boolean isStrongPassword(byte[] password) {

		boolean value = isLengthValid(password) && containsUpperCase(password) && containsLowerCase(password) && containsDigit(password)
				&& containsSpecialCharacter(password);
		
		clearBytes(password);
		
		return value;
	}

	private static boolean isLengthValid(byte[] password) {

		boolean value = password.length >= 8;
		
		clearBytes(password);
	}

	private static boolean containsUpperCase(byte[] password) {

		boolean hasUpperCase = false;

		for (byte b : password) {
			char c = (char) b;

			if (Character.isUpperCase(c)) {
				hasUpperCase = true;    
			}


		}
		
		clearBytes(password);
		
		return hasUpperCase;
	}

	private static boolean containsLowerCase(byte[] password) {

		boolean hasLowerCase = false;

		for (byte b : password) {
			char c = (char) b;

			if (Character.isLowerCase(c)) {
				hasLowerCase = true;    
			}


		}
		
		clearBytes(password);
		
		return hasLowerCase;
	}


	private static boolean containsDigit(byte[] password) {

		boolean hasDigit = false;

		for (byte b : password) {
			char c = (char) b;

			if (Character.isDigit(c)) {
				hasDigit = true;    
			}


		}
		
		clearBytes(password);
		
		return hasDigit;
	}


	private static boolean containsSpecialCharacter(byte[] password) {

		boolean hasSpecialChar = false;
		for(byte b:password) {
			char charPassword= (char) b;

			for (char c: specialCharacters) {
				if(charPassword==c) {
					hasSpecialChar=true;
				}
			}
		}
		return hasSpecialChar;
	}
}
