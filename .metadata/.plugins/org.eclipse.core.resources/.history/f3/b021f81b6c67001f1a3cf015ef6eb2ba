package controller.Servlet.userLogged;

import javax.servlet.*;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;

@WebFilter("/*")  // Applica il filtro a tutte le richieste
public class CsrfFilter implements Filter {

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // Inizializzazione del filtro, se necessaria
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;

        // Verifica il metodo della richiesta
        String method = httpRequest.getMethod();

        // Log del metodo per debug
        System.out.println("CsrfFilter: Richiesta ricevuta con metodo " + method);

        // Se è una richiesta POST, verifica il token CSRF
        if ("POST".equalsIgnoreCase(method)) {
            HttpSession session = httpRequest.getSession(false);

            if (session == null || session.getAttribute("csrfToken") == null) {
                // Nessun token CSRF in sessione, risposta con errore
                httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token missing");
                return;
            }

            // Recupera il token CSRF dalla sessione e dalla richiesta
            String sessionToken = (String) session.getAttribute("csrfToken");
            String requestToken = httpRequest.getParameter("csrfToken");

            if (sessionToken == null || !sessionToken.equals(requestToken)) {
                // Token CSRF non valido o mancante, risposta con errore
                httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF token");
                return;
            }
        }

        // Continua con il filtro se il token è valido o non è una richiesta POST
        chain.doFilter(request, response);
    }

    @Override
    public void destroy() {
        // Pulizia delle risorse, se necessaria
    }
}
