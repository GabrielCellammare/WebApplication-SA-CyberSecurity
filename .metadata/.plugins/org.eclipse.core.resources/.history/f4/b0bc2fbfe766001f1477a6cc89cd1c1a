package controller.util;

import java.io.IOException;
import java.util.Base64;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import model.Dao.CookieDAO;

public class AuthUtils {

    private static final String LOGIN_PAGE = "userNotLoggedLogin.jsp";
    private static final String INDEX_PAGE = "userLoggedIndex.jsp";

    public static boolean checkAuthentication(HttpServletRequest request, HttpServletResponse response) throws IOException {
        HttpSession session = request.getSession(false);
        boolean isLoggedIn = (session != null && session.getAttribute("email") != null);
        
        // Stampa di debug per la sessione e l'email
        if (session != null) {
            System.out.println("isLOGGEDIN: " + isLoggedIn);
            System.out.println("Email: " + session.getAttribute("email"));
        }

        // Determina se la richiesta corrente è per la pagina di login
        String requestURI = request.getRequestURI();
        boolean isLoginRequest = requestURI.endsWith(LOGIN_PAGE);
        boolean isIndexPageRequest = requestURI.endsWith(INDEX_PAGE);

        // Gestione autenticazione tramite cookie
        if (!isLoggedIn) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {
                    if ("rememberMe".equals(cookie.getName())) {
                        String token = cookie.getValue();
                        byte[] token_decode = Base64.getDecoder().decode(token);

                        if (CookieDAO.isTokenValidDAO(token_decode)) {
                            // Autenticazione tramite cookie riuscita
                            String email = CookieDAO.getEmailFromTokenDAO(token_decode);
                            session = request.getSession(true);  // Crea una nuova sessione
                            session.setAttribute("email", email);
                            session.setAttribute("login", true);
                            session.setMaxInactiveInterval(15 * 60);
                            isLoggedIn = true;  // Utente autenticato
                            break;
                        } else {
                            // Token non valido, rimuovi il cookie
                            if (CookieDAO.deleteToken(token_decode)) {
                                Cookie expiredCookie = new Cookie("rememberMe", null);
                                expiredCookie.setMaxAge(0);
                                expiredCookie.setHttpOnly(true);
                                expiredCookie.setSecure(true);
                                response.addCookie(expiredCookie);
                            }
                            isLoggedIn = false;  // Imposta come non autenticato
                            break;
                        }
                    }
                }
            }
        }

        // Logica di reindirizzamento basata sull'autenticazione
        if (isLoggedIn) {
            // Se l'utente è autenticato e tenta di accedere alla pagina di login, reindirizzalo alla pagina principale
            if (isLoginRequest) {
                response.sendRedirect(INDEX_PAGE);
                return false;  // L'autenticazione è stata gestita
            } else {
                return true;  // Utente autenticato, continua con la richiesta
            }
        } else {
            // Utente non autenticato
            if (isLoginRequest) {
                return true;  // Utente non autenticato ma sta accedendo alla pagina di login, continua con la richiesta
            } else {
                response.sendRedirect(LOGIN_PAGE);  // Reindirizza alla pagina di login
                return false;  // L'autenticazione è stata gestita
            }
        }
    }
}
