package controller.Servlet.userLogged;

import java.io.IOException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class UserLoggedFilter implements Filter {

	private static final String LOGIN_PAGE = "userNotLoggedLogin.jsp";
	private static final String INDEX_PAGE = "userLoggedIndex.jsp";

	@Override
	public void init(FilterConfig config) throws ServletException {
		// Inizializzazione se necessaria
	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {

		HttpServletRequest httpRequest = (HttpServletRequest) request;
		HttpServletResponse httpResponse = (HttpServletResponse) response;

		// Imposta le intestazioni di cache per impedire il caching delle pagine protette
		httpResponse.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
		httpResponse.setHeader("Pragma", "no-cache");
		httpResponse.setDateHeader("Expires", 0);

		// Recupera la sessione corrente, se esiste
		HttpSession session = httpRequest.getSession(false);
		boolean isLoggedInProtected = (session != null && session.getAttribute("email") != null);

		// Stampa di debug per la sessione e l'email
		if (session != null) {
			System.out.println("isLOGGEDIN: " + isLoggedInProtected);
			System.out.println("Email: " + session.getAttribute("email"));
		}

		// Se l'utente non è loggato, reindirizza alla pagina di login
		if (!isLoggedInProtected) {
			httpResponse.sendRedirect("userNotLoggedLogin.jsp");
		} else {
			if ("POST".equalsIgnoreCase(httpRequest.getMethod())) {

				System.out.println("Dentro il post");
				if (session == null || session.getAttribute("csrfToken") == null) {
					httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, "CSRF token missing");
					return;
				}

				String sessionToken = (String) session.getAttribute("csrfToken");
				String requestToken = httpRequest.getParameter("csrfToken");

				if (sessionToken == null || !sessionToken.equals(requestToken)) {
					httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF token");
					return;
				}


				chain.doFilter(request, response);
			}
			// Continua con la richiesta
			chain.doFilter(request, response);
		}


	}


	@Override
	public void destroy() {
		// Pulizia se necessaria
	}
}
