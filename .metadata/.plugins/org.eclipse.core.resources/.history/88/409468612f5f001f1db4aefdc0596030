package controller.Servlet.userNotLogged;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.google.gson.JsonObject;

import application.util.Encryption;
import application.util.PasswordManager;
import application.util.customMessage.DisplayMessage;
import model.Dao.LoginDAO;


/**
 * Servlet implementation class LoginServlet
 */
@WebServlet("/LoginServlet")
public class LoginServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public LoginServlet() {
		super();
		// TODO Auto-generated constructor stub
	}


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		response.setContentType("application/json; charset=UTF-8");

		HttpSession session = request.getSession();

		session = request.getSession();	

		String string_encryptedEmail = null;
		String string_encryptedPassword = null;

		byte[] byte_encryptedEmail = null;
		byte[] byte_encryptedPassword = null;

		byte[] pad_email = null;
		byte[] pad_password = null;

		String email = request.getParameter("email");
		byte[] password = request.getParameter("password").getBytes();
		boolean ricordami = request.getParameter("remember") != null;
		

		byte[] byte_email = email.getBytes(java.nio.charset.StandardCharsets.UTF_8); 
		pad_email = Encryption.addPadding(byte_email);

		String string_Password = byteArrayToString(password);

		if (ricordami) {
			try {

				try {
					// CONVERTO LA STRINGA IN BYTE
					

					// AGGIUNGO IL PADDING PER EVITARE PROBLEMI DI DECIFRATURA ED EFFETTUO LA CIFRATURA
					pad_password = Encryption.addPadding(password);
					

					byte_encryptedEmail = Encryption.encrypt(pad_email);
					byte_encryptedPassword = Encryption.encrypt(pad_password);

				} catch (IllegalArgumentException e) {
					System.out.println("ERRORE FUNZIONI getBytes/pad/Aes.Encrypt: " + e.getMessage());
					e.printStackTrace();
				}
				
				//Codice per verificare il corretto crittaggio
				string_encryptedEmail = byteArrayToString(byte_encryptedEmail);
				string_encryptedPassword = byteArrayToString(byte_encryptedPassword);

				System.out.println("Encrypted email: " + string_encryptedEmail);
				System.out.println("Encrypted username: " + string_encryptedPassword);
				

			} catch (Exception e) {
				System.out.println("Errore durante l'encrypt di username e/o password");
				e.printStackTrace();
			}

			String base64EncodedEmail = Base64.getEncoder().encodeToString(byte_encryptedEmail);
			String base64EncodedPassword = Base64.getEncoder().encodeToString(byte_encryptedPassword);

			try {
				if (LoginDAO.isUserValid(email, password)) {
					//session = request.getSession();
					//session.setAttribute("username", nomeUtente);

					Cookie usernameCookie = new Cookie("email", base64EncodedEmail);
					Cookie passwordCookie = new Cookie("password", base64EncodedPassword);

					usernameCookie.setPath("/");
					passwordCookie.setPath("/");

					usernameCookie.setMaxAge(10 * 60); // 10 minuti
					passwordCookie.setMaxAge(10 * 60); // 10 minuti

					response.addCookie(usernameCookie);
					response.addCookie(passwordCookie);

					request.setAttribute("nomeUtente", email);
					request.setAttribute("login", true); //Se questa variabile non viene inizializzata su true, l'utente non riesce ad accedere a benvenuto.jsp

					PasswordManager.clearBytes(password);
					email = null;

					request.getRequestDispatcher("userLoggedIndex.jsp").forward(request, response);
				} else {
					System.out.println("ERRORE metodo isUserValid checked - username: " + email);
					System.out.println("ERRORE metodo isUserValid checked - password: " + string_Password);

					email = null;
					PasswordManager.clearBytes(password);

					DisplayMessage.showPanel("Sembra che questo utente non esista! Controlla i dati inseriti.");
					request.getRequestDispatcher("/userNotLoggedLogin.jsp").forward(request, response);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

		} else {

			try {
				if (LoginDAO.isUserValid(email, password)) {

					session.setAttribute("email", base64EncodedEmail);

					request.setAttribute("login", true); //Se questa variabile non viene inizializzata su true, l'utente non riesce ad accedere a benvenuto.jsp
					request.setAttribute("Email", email);

					PasswordManager.clearBytes(password);
					email = null;

					request.getRequestDispatcher("userLoggedIndex.jsp").forward(request, response);
				} else {
					System.out.println("ERRORE metodo isUserValid 2 - username: " + email);
					System.out.println("ERRORE metodo isUserValid 2 - password: " + string_Password);

					email = null;
					PasswordManager.clearBytes(password);

					DisplayMessage.showPanel("Password errata! Riprova.");
					request.getRequestDispatcher("/userNotLoggedLogin.jsp").forward(request, response);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		checkCookie(request, response);
	}


	

	private static String byteArrayToString(byte[] byteArray) {
		return new String(byteArray, StandardCharsets.UTF_8);
	}

	

	private void checkCookie(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {

		request.setCharacterEncoding("UTF-8");
		response.setContentType("application/json; charset=UTF-8");

		JsonObject cookieData = new JsonObject();

		String string_encryptedUsernameCookie = null;
		String string_encryptedPasswordCookie = null;

		String usernameCookie = null;
		String passwordCookie = null;

		byte[] byte_encryptedPasswordCookie = null;
		byte[] byte_encryptedUsernameCookie = null;

		Cookie[] cookies = request.getCookies();

		boolean foundUsernameCookie = false;
		boolean foundPasswordCookie = false;

		if (cookies != null && cookies.length > 0) {
			for (Cookie cookie : cookies) {
				if (cookie.getName().equals("username")) {
					foundUsernameCookie = true;
					string_encryptedUsernameCookie = cookie.getValue();
					byte_encryptedUsernameCookie = Base64.getDecoder().decode(string_encryptedUsernameCookie);
				} else if (cookie.getName().equals("password")) {
					foundPasswordCookie = true;
					string_encryptedPasswordCookie = cookie.getValue();
					byte_encryptedPasswordCookie = Base64.getDecoder().decode(string_encryptedPasswordCookie);
				} else if (!cookie.getName().equals("JSESSIONID")) {
					// Se il cookie non si chiama "username" o "password" o "JSESSIONID", invalidalo
					cookie.setValue("");  // Imposta il valore del cookie a una stringa vuota
					cookie.setMaxAge(0);
					response.addCookie(cookie);
				}
			}
		}

		if (!foundUsernameCookie || !foundPasswordCookie) {
			System.out.println("Uno dei due cookie non è stato trovato, interrompo");
		} else {
			try {
				byte[] decryptedUsernameBytesCookie = Encryption.decrypt(byte_encryptedUsernameCookie);
				byte[] decryptedPasswordBytesCookie = Encryption.decrypt(byte_encryptedPasswordCookie);

				decryptedUsernameBytesCookie = Encryption.removePadding(decryptedUsernameBytesCookie);
				decryptedPasswordBytesCookie = Encryption.removePadding(decryptedPasswordBytesCookie);

				usernameCookie = byteArrayToString(decryptedUsernameBytesCookie);
				passwordCookie = byteArrayToString(decryptedPasswordBytesCookie);

				// RIEMPIRE IL FORM DEL login.jsp con questi dati se non sono nulli
				request.setAttribute("decryptedUsername", usernameCookie);
				request.setAttribute("decryptedPassword", passwordCookie);

				cookieData.addProperty("cookiesPresent", true);
				cookieData.addProperty("decryptedUsername", usernameCookie);
				cookieData.addProperty("decryptedPassword", passwordCookie);
			} catch (Exception e) {
				System.out.println("ERRORE CON L'ACCESSO CON I COOKIE NEL DO POST");
				e.printStackTrace();
			}
		}

		response.getWriter().write(cookieData.toString());
	}
}



