package application.util;

import java.security.SecureRandom;
import java.util.regex.Pattern;

public class PasswordManager {

	final static int saltLength = 16;

	public static void clearBytes(byte[] password) {
		if (password != null) {

			for (int i = 0; i < password.length; i++) {
				password[i] = 0;
			}
		}
	}

	public static byte[] generateRandomBytes(int saltLenghts) {


		byte[] salt = new byte[saltLength];
		SecureRandom secureRandom = new SecureRandom();
		secureRandom.nextBytes(salt);

		return salt;
	}

	public static boolean isStrongPassword(byte[] password) {

		return isLengthValid(password) && containsUpperCase(password) && containsLowerCase(password) && containsDigit(password)
				&& containsSpecialCharacter(password);
	}

	private static boolean isLengthValid(byte[] password) {

		return password.length >= 8;
	}

	private static boolean containsUpperCase(byte[] password) {

		boolean hasUpperCase = false;

		for (byte b : password) {
			char c = (char) b;

			if (Character.isUpperCase(c)) {
				hasUpperCase = true;    
			}


		}

		return hasUpperCase;
	}

	private static boolean containsLowerCase(byte[] password) {

		boolean hasLowerCase = false;

		for (byte b : password) {
			char c = (char) b;

			if (Character.isLowerCase(c)) {
				hasLowerCase = true;    
			}


		}

		return hasLowerCase;
	}


	private static boolean containsDigit(byte[] password) {

		boolean hasDigit = false;

		for (byte b : password) {
			char c = (char) b;

			if (Character.isDigit(c)) {
				hasDigit = true;    
			}


		}

		return hasDigit;
	}


	private static boolean containsSpecialCharacter(byte[] password) {
		char[] specialCharacters = {'!','@','#','$','%','^','&','.','*','(',')','-','_','+','=','<','>','?','.'};

		for(byte b:password) {
			char c= (char) b;

			for (char c: specialCharacters) {

			}
		}
		return Pattern.compile("[" + Pattern.quote(specialCharacters) + "]").matcher(str).find();
	}
}
