package controller.Servlet.userLogged;

import java.io.IOException;
import java.util.Base64;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import application.util.customMessage.DisplayMessage;
import model.Dao.CookieDAO;

public class AuthenticationFilter implements Filter {

	private static final String LOGIN_PAGE = "userNotLoggedLogin.jsp";
	private static final String INDEX_PAGE = "userLoggedIndex.jsp";

	public void init(FilterConfig config) throws ServletException {
		// Inizializzazione se necessaria
	}



	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {

		HttpServletRequest httpRequest = (HttpServletRequest) request;
		HttpServletResponse httpResponse = (HttpServletResponse) response;

		// Imposta le intestazioni di cache
		httpResponse.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
		httpResponse.setHeader("Pragma", "no-cache");
		httpResponse.setDateHeader("Expires", 0);

		HttpSession session = httpRequest.getSession(false);
		boolean isLoggedIn = (session != null && session.getAttribute("email") != null);
		String requestURI = httpRequest.getRequestURI();

		System.out.println("isLOGGEDIN: " + isLoggedIn);

		if (!isLoggedIn) {
			// Verifica se c'è un cookie "rememberMe"
			Cookie[] cookies = httpRequest.getCookies();
			boolean rememberMeCookieFound = false;

			if (cookies != null) {
				for (Cookie cookie : cookies) {
					if ("rememberMe".equals(cookie.getName())) {
						rememberMeCookieFound = true;  // Flag per il cookie "rememberMe"
						String token = cookie.getValue();
						byte[] token_decode = Base64.getDecoder().decode(token);
						if (CookieDAO.isTokenValidDAO(token_decode)) {
							// Autenticazione tramite cookie riuscita
							String email = CookieDAO.getEmailFromTokenDAO(token_decode);
							session = httpRequest.getSession(true);  // Crea una nuova sessione
							session.setAttribute("email", email);
							session.setAttribute("login", true);
							session.setMaxInactiveInterval(15 * 60);
							isLoggedIn = true;  // Utente autenticato
							break;  // Uscita dal loop dei cookie, utente autenticato
						} else {
							// Se il token non è valido, rimuovi il cookie
							if (CookieDAO.deleteToken(token_decode)) {
								Cookie expiredCookie = new Cookie("rememberMe", null);
								expiredCookie.setMaxAge(0);
								expiredCookie.setHttpOnly(true);
								expiredCookie.setSecure(true);
								httpResponse.addCookie(expiredCookie);
							}
							isLoggedIn = false;  // Imposta come non autenticato
							break;
						}
					}
				}
			}

			// Se il cookie "rememberMe" non è stato trovato e l'utente non è autenticato
			if (!rememberMeCookieFound) {
				if (requestURI.endsWith("userLoggedIndex.jsp")) {
					// L'utente non autenticato sta cercando di accedere alla pagina protetta, reindirizza alla pagina di login
					httpResponse.sendRedirect("userNotLoggedLogin.jsp");
					return;  // Esci dalla funzione dopo il reindirizzamento
				} else if (requestURI.endsWith("userNotLoggedLogin.jsp")) {
					// L'utente non autenticato sta cercando di accedere alla pagina di benvenuto non loggato, lascialo passare
					chain.doFilter(request, response);
					return;
				}
			}
		}

		if (isLoggedIn) {
			// Utente autenticato
			if (requestURI.endsWith("userNotLoggedLogin.jsp")) {
				// L'utente autenticato non dovrebbe accedere alla pagina di login, reindirizzalo alla pagina protetta
				httpResponse.sendRedirect("userLoggedIndex.jsp");
				return;  // Esci dalla funzione dopo il reindirizzamento
			} else {
				// Tutte le altre pagine richieste dall'utente autenticato, lascia passare
				chain.doFilter(request, response);
				return;
			}
		} else {
			// Per tutte le altre richieste non autentiche
			httpResponse.sendRedirect("userNotLoggedLogin.jsp");
			return;
		}
	}

@Override
public void destroy() {
	// Pulizia se necessaria
}
}



@Override
public void destroy() {
	// Pulizia se necessaria
}
}
