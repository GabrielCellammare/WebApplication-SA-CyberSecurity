package controller.Servlet.userNotLogged;

import java.io.IOException;
import java.util.Base64;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import application.util.cryptography.Encryption;
import application.util.cryptography.PasswordManager;
import application.util.customMessage.DisplayMessage;
import application.util.entity.UserLogged;
import controller.Servlet.userLogged.AuthUtils;
import model.Dao.LoginDAO;


/**
 * Servlet implementation class LoginServlet
 */
@WebServlet("/LoginServlet")
public class LoginServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final int COOKIE_MAX_AGE = 60 * 60 * 24; // 1 giorno


	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public LoginServlet() {
		super();
		// TODO Auto-generated constructor stub
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String action = request.getParameter("action");

		if ("login".equals(action)) {

			// Verifica se l'utente è già autenticato utilizzando AuthUtils
			if (AuthUtils.checkAuthentication(request, response)) {
				// Se l'utente è già autenticato, viene reindirizzato alla pagina protetta
				response.sendRedirect("userLoggedIndex.jsp");
				return;
			}


		}
		else {
			// Mostra la pagina principale
			response.sendRedirect("userNotLoggedIndex.jsp");
		}
	}


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		response.setContentType("application/json; charset=UTF-8");

		String email = request.getParameter("email");
		byte[] password = request.getParameter("password").getBytes();
		boolean ricordami = request.getParameter("remember") != null;

		byte[] byte_email = email.getBytes(java.nio.charset.StandardCharsets.UTF_8); 
		byte[] pad_email = Encryption.addPadding(byte_email);
		byte[] byte_encryptedEmail = null;

		try {
			byte_encryptedEmail = Encryption.encrypt(pad_email);
		} catch (Exception e) {
			e.printStackTrace();
			DisplayMessage.showPanel("Errore interno, riprovare!");
			response.sendRedirect("userNotLoggedLogin.jsp");  // Reindirizzamento in caso di errore critico
			return;
		}

		if (LoginDAO.isUserValid(email, password)) {
			UserLogged userlogged = new UserLogged(byte_encryptedEmail);

			HttpSession session = request.getSession();

			session.setAttribute("email", email);
			session.setAttribute("login", true);
			session.setAttribute("csrfToken", userlogged.getCsrfToken());
			session.setMaxInactiveInterval(15 * 60); // 15 minuti di timeout della sessione

			if (ricordami) {
				byte[] cookieToken = userlogged.getCookieToken();
				if (LoginDAO.storeCookie(byte_encryptedEmail, cookieToken)) {
					Cookie rememberMeCookie = new Cookie("rememberMe", Base64.getEncoder().encodeToString(cookieToken));
					rememberMeCookie.setMaxAge(COOKIE_MAX_AGE);
					rememberMeCookie.setHttpOnly(true);
					rememberMeCookie.setSecure(true);
					response.addCookie(rememberMeCookie);
					// Redirect to logged-in user page
					response.sendRedirect("userLoggedIndex.jsp");
				} else {
					DisplayMessage.showPanel("C'è stato un problema con i cookie. Riprova!");
					response.sendRedirect("userNotLoggedLogin.jsp");  // Reindirizzamento in caso di problema con i cookie
				}
			} else {
				// Se "ricordami" non è selezionato, continua senza impostare il cookie
				DisplayMessage.showPanel("Login senza meccanismo dei cookie effettuato correttamente!");
				response.sendRedirect("userLoggedIndex.jsp");
			}
		} else {
			DisplayMessage.showPanel("Password errata! Riprovare");
			response.sendRedirect("userNotLoggedLogin.jsp");  // Reindirizzamento in caso di autenticazione fallita
		}

		// Pulizia dei dati sensibili dalla memoria
		PasswordManager.clearBytes(password);
		PasswordManager.clearBytes(byte_email);
		PasswordManager.clearBytes(pad_email);
		PasswordManager.clearBytes(byte_encryptedEmail);
		email = null;
	}





	/**
	private void checkCookie(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {

		request.setCharacterEncoding("UTF-8");
		response.setContentType("application/json; charset=UTF-8");

		JsonObject cookieData = new JsonObject();

		String string_encryptedUsernameCookie = null;
		String string_encryptedPasswordCookie = null;

		String usernameCookie = null;
		String passwordCookie = null;

		byte[] byte_encryptedPasswordCookie = null;
		byte[] byte_encryptedUsernameCookie = null;

		Cookie[] cookies = request.getCookies();

		boolean foundUsernameCookie = false;
		boolean foundPasswordCookie = false;

		if (cookies != null && cookies.length > 0) {
			for (Cookie cookie : cookies) {
				if (cookie.getName().equals("username")) {
					foundUsernameCookie = true;
					string_encryptedUsernameCookie = cookie.getValue();
					byte_encryptedUsernameCookie = Base64.getDecoder().decode(string_encryptedUsernameCookie);
				} else if (cookie.getName().equals("password")) {
					foundPasswordCookie = true;
					string_encryptedPasswordCookie = cookie.getValue();
					byte_encryptedPasswordCookie = Base64.getDecoder().decode(string_encryptedPasswordCookie);
				} else if (!cookie.getName().equals("JSESSIONID")) {
					// Se il cookie non si chiama "username" o "password" o "JSESSIONID", invalidalo
					cookie.setValue("");  // Imposta il valore del cookie a una stringa vuota
					cookie.setMaxAge(0);
					response.addCookie(cookie);
				}
			}
		}

		if (!foundUsernameCookie || !foundPasswordCookie) {
			System.out.println("Uno dei due cookie non è stato trovato, interrompo");
		} else {
			try {
				byte[] decryptedUsernameBytesCookie = Encryption.decrypt(byte_encryptedUsernameCookie);
				byte[] decryptedPasswordBytesCookie = Encryption.decrypt(byte_encryptedPasswordCookie);

				decryptedUsernameBytesCookie = Encryption.removePadding(decryptedUsernameBytesCookie);
				decryptedPasswordBytesCookie = Encryption.removePadding(decryptedPasswordBytesCookie);

				usernameCookie = Encryption.byteArrayToString(decryptedUsernameBytesCookie);
				passwordCookie = Encryption.byteArrayToString(decryptedPasswordBytesCookie);

				// RIEMPIRE IL FORM DEL login.jsp con questi dati se non sono nulli
				request.setAttribute("decryptedUsername", usernameCookie);
				request.setAttribute("decryptedPassword", passwordCookie);

				cookieData.addProperty("cookiesPresent", true);
				cookieData.addProperty("decryptedUsername", usernameCookie);
				cookieData.addProperty("decryptedPassword", passwordCookie);
			} catch (Exception e) {
				System.out.println("ERRORE CON L'ACCESSO CON I COOKIE NEL DO POST");
				e.printStackTrace();
			}
		}

		response.getWriter().write(cookieData.toString());
	}
	 **/

}



