package application.util;
import java.io.IOException;
import java.nio.file.Paths;
import javax.servlet.http.Part;
import org.apache.tika.Tika;
import org.apache.tika.exception.TikaException;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.parser.AutoDetectParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.parser.Parser;
import org.apache.tika.sax.BodyContentHandler;

import application.util.customMessage.DisplayMessage;




public class ImageProfileFileChecker {

	private final static long maxSizeInBytes = 5 * 1024 * 1024; // 5 MB

	public static boolean checkImageFile(Part filePart,String lastUpdate, String checksum) throws IOException{
		
		Tika tika = new Tika();


		if (filePart != null && filePart.getSize() > 0) {
			
			try {
				printMetadata(filePart, tika);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			String fileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();

			String fileExtension = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();

			if ("jpeg".equals(fileExtension) || "jpg".equals(fileExtension) || "png".equals(fileExtension)) {

				if (filePart.getSize() > maxSizeInBytes) {
					DisplayMessage.showPanel("L'immagine selezionata supera la dimensione massima consentita che è di 5 MB");
					return false;

				}
				
				String contentType = tika.detect(filePart.getInputStream());
				String lastUpdate = ModifyChecker.getLastModify(filePart)
				String checksum = 
				
				if (contentType != null && contentType.startsWith("image/")) {
					return true;

				} else {

					DisplayMessage.showPanel("Il file non è un'immagine valida.");
					return false;
				}


			} else {

				DisplayMessage.showPanel("Estensione del file non supportata.");
				return false;
			}


		} else {
			DisplayMessage.showPanel("Nessun file caricato");
			return false;

		}

	}




	private static void printMetadata(Part filePart, Tika tika) throws Exception {

		String fileType = tika.detect(filePart.getInputStream());
		System.out.println("Content Type: " + fileType);

		// Estrae i metadati
		BodyContentHandler handler = new BodyContentHandler();
		Metadata metadata = new Metadata();
		Parser parser = new AutoDetectParser();
		ParseContext parseContext = new ParseContext();

		try {
			parser.parse(filePart.getInputStream(), handler, metadata, parseContext);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
	
		} catch (TikaException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// Stampa i metadati
		String[] metadataNames = metadata.names();
		for (String name : metadataNames) {
			System.out.println(name + ": " + metadata.get(name));
		}

	}
}